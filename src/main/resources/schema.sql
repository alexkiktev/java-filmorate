CREATE TABLE IF NOT EXISTS mpa
(
    mpa_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(5) NOT NULL
);

CREATE TABLE IF NOT EXISTS films
(
    film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description VARCHAR(300),
    release_date DATE NOT NULL,
    duration INTEGER,
    rate INTEGER,
    mpa_id INTEGER,
    FOREIGN KEY(mpa_id) REFERENCES mpa (mpa_id)
);

CREATE TABLE IF NOT EXISTS genres
(
    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(30) NOT NULL
);

CREATE TABLE IF NOT EXISTS filmgenre
(
    film_id INTEGER NOT NULL,
    genre_id INTEGER NOT NULL,
    FOREIGN KEY (film_id) REFERENCES films (film_id),
    FOREIGN KEY (genre_id) REFERENCES genres (genre_id),
    PRIMARY KEY (film_id, genre_id)
    --CONSTRAINT UC_filmgenre UNIQUE (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS users
(
    user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR(30) NOT NULL UNIQUE,
    login VARCHAR(20) NOT NULL UNIQUE,
    name VARCHAR(30) NOT NULL,
    birthday DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS friends
(
    user_id INTEGER NOT NULL,
    friend_id INTEGER NOT NULL,
    status BOOLEAN NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users (user_id),
    FOREIGN KEY (friend_id) REFERENCES users (user_id),
    PRIMARY KEY (user_id, friend_id)
);

CREATE TABLE IF NOT EXISTS userlikes
(
    film_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    FOREIGN KEY (film_id) REFERENCES films (film_id),
    FOREIGN KEY (user_id) REFERENCES users (user_id),
    PRIMARY KEY (film_id, user_id)
);